// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Users

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  hashedPassword String

  profile   Profile?
  directory Directory[]
  document  Document[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Profile {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  @@map("profiles")
}

//Items
model Document {
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  id      String  @id @default(uuid())
  name    String
  content String? @db.Text

  isPublic Boolean @default(false) @map("is_public")

  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @default(now()) @map("update_at")

  directory   Directory? @relation(fields: [directoryId], references: [id])
  directoryId String?    @map("directory_id")

  @@map("documents")
}

model Directory {
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  id         String  @id @default(uuid())
  name       String
  isExplorer Boolean @default(false) @map("is_explorer")

  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @default(now()) @map("update_at")

  parentId String?     @map("parent_id")
  parent   Directory?  @relation("DirectoryChildren", fields: [parentId], references: [id])
  children Directory[] @relation("DirectoryChildren")

  documents Document[]

  @@map("directories")
}
