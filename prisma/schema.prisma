// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

//Users

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime @db.Timestamp(3)
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    emailVerified DateTime? @map("email_verified") @db.Timestamp(3)
    image         String
    accounts      Account[]
    sessions      Session[]

    hashedPassword String?

    profile   Profile?
    workspace WorkSpace[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime @db.Timestamp(3)

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Profile {
    id      String @id @default(uuid())
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String @unique @map("user_id")
    options Json   @map("options")

    @@map("profiles")
}

model WorkSpace {
    id        String   @id @default(uuid())
    name      String
    createdAt DateTime @default(dbgenerated("NOW()")) @map("created_at") @db.Timestamp(3)
    updatedAt DateTime @default(dbgenerated("NOW()")) @map("updated_at") @db.Timestamp(3)

    User     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String?
    explorer Explorer?

    @@map("workspaces")
}

enum ParentType {
    Directory
    Explorer
}

enum ChildType {
    Document
    Directory
}

model Document {
    id      String  @id @default(uuid())
    name    String
    content String? @db.Text

    createdAt DateTime @default(dbgenerated("NOW()")) @map("created_at") @db.Timestamp(3)
    updatedAt DateTime @default(dbgenerated("NOW()")) @map("updated_at") @db.Timestamp(3)
    parent    Item     @relation(fields: [parentId], references: [id])
    parentId  String   @unique @map("itemId")

    @@map("documents")
}

model Directory {
    id   String @id @default(uuid())
    name String

    createdAt DateTime @default(dbgenerated("NOW()")) @map("created_at") @db.Timestamp(3)
    updatedAt DateTime @default(dbgenerated("NOW()")) @map("updated_at") @db.Timestamp(3)
    parent    Item     @relation("child", fields: [parentId], references: [id])
    parentId  String   @unique
    childs    Item[]   @relation("parents")

    @@map("directories")
}

model Item {
    id String @id @default(uuid())

    childType ChildType
    document  Document?
    child     Directory? @relation("child")

    parentType ParentType
    parent     Directory? @relation("parents", fields: [parentId], references: [id], onDelete: Cascade)
    parentId   String?
    explorer   Explorer?  @relation(fields: [explorerId], references: [id], onDelete: Cascade)
    explorerId String?

    @@map("items")
}

model Explorer {
    id String @id @default(uuid())

    workspace   WorkSpace @relation(fields: [workspaceId], references: [id])
    workspaceId String    @unique

    items Item[]
}
